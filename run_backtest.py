# run_backtest.py
"""
–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –≤–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ Freqtrade
"""
import os
import sys
import json
import subprocess
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from src.config.settings import settings
from freqtrade_strategy import AdvancedCryptoStrategy, get_freqtrade_config


def prepare_freqtrade_env():
    """
    –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Freqtrade
    """
    # –ü—É—Ç—å –∫ Freqtrade
    freqtrade_path = Path("C:/freqtrade-nfi")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    user_data = freqtrade_path / "ft_userdata"
    strategies_dir = user_data / "strategies"
    data_dir = user_data / "data"

    strategies_dir.mkdir(parents=True, exist_ok=True)
    data_dir.mkdir(parents=True, exist_ok=True)

    # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    strategy_file = strategies_dir / "AdvancedCryptoStrategy.py"

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8
    with open("freqtrade_strategy.py", "r", encoding="utf-8") as source:
        strategy_content = source.read()

    with open(strategy_file, "w", encoding="utf-8") as target:
        target.write(strategy_content)

    print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ {strategy_file}")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = get_freqtrade_config()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—à–∏ API –∫–ª—é—á–∏ –∏–∑ settings
    config["exchange"]["key"] = settings.api.BINANCE_API_KEY.get_secret_value()
    config["exchange"]["secret"] = settings.api.BINANCE_API_SECRET.get_secret_value()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    config["user_data_dir"] = str(user_data)
    config["datadir"] = str(data_dir)
    config["strategy_path"] = str(strategies_dir)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    config_file = user_data / "config_advanced.json"

    with open(config_file, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=2)

    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–Ω: {config_file}")

    return freqtrade_path, config_file


def download_data(freqtrade_path: Path, pairs: list, timeframe: str, days: int):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print(f"\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(pairs)} –ø–∞—Ä...")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é Freqtrade
    os.chdir(freqtrade_path)

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd_ps1 = f"""
cd {freqtrade_path}
.\\venv\\Scripts\\Activate.ps1
freqtrade download-data --userdir ft_userdata --exchange binance --pairs {' '.join(pairs)} --timeframe {timeframe} --days {days} --data-format json
"""

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PowerShell —Å–∫—Ä–∏–ø—Ç
    temp_script = freqtrade_path / "temp_download.ps1"
    with open(temp_script, "w", encoding="utf-8") as f:
        f.write(cmd_ps1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
    result = subprocess.run(
        ["powershell", "-ExecutionPolicy", "Bypass", "-File", str(temp_script)],
        capture_output=True,
        text=True,
        encoding='utf-8'
    )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
    temp_script.unlink(missing_ok=True)

    if result.returncode == 0:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    else:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {result.stderr}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã


def run_backtest(freqtrade_path: Path, config_file: Path,
                 strategy: str = "AdvancedCryptoStrategy",
                 timerange: str = None):
    """
    –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
    """
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy}...")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é Freqtrade
    os.chdir(freqtrade_path)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd = f"freqtrade backtesting --userdir ft_userdata --strategy {strategy}"

    if timerange:
        cmd += f" --timerange {timerange}"

    # PowerShell —Å–∫—Ä–∏–ø—Ç
    cmd_ps1 = f"""
cd {freqtrade_path}
.\\venv\\Scripts\\Activate.ps1
{cmd}
"""

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
    temp_script = freqtrade_path / "temp_backtest.ps1"
    with open(temp_script, "w", encoding="utf-8") as f:
        f.write(cmd_ps1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
    result = subprocess.run(
        ["powershell", "-ExecutionPolicy", "Bypass", "-File", str(temp_script)],
        capture_output=True,
        text=True,
        encoding='utf-8'
    )

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ê:")
    print("=" * 60)
    print(result.stdout)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
    temp_script.unlink(missing_ok=True)

    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")

    return result.returncode == 0


def quick_test():
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    """
    print("=" * 60)
    print("–ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–¢–†–ê–¢–ï–ì–ò–ò –ß–ï–†–ï–ó FREQTRADE")
    print("=" * 60)

    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        freqtrade_path, config_file = prepare_freqtrade_env()

        # –ü–∞—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        pairs = [
            "BTC/USDT",
            "ETH/USDT",
            "SOL/USDT"
        ]

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        download_data(freqtrade_path, pairs, "5m", 30)

        # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        timerange = "20250907-20250914"
        success = run_backtest(freqtrade_path, config_file, timerange=timerange)

        if success:
            print("\n‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("\n–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ PowerShell")
            print(f"2. cd {freqtrade_path}")
            print(f"3. .\\venv\\Scripts\\Activate.ps1")
            print(
                f"4. freqtrade plot-dataframe --userdir ft_userdata --strategy AdvancedCryptoStrategy --pairs BTC/USDT")

        return success

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def interactive_mode():
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
    """
    print("\n" + "=" * 60)
    print("FREQTRADE –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø")
    print("=" * 60)

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è)")
    print("2. –ü–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç (2 –º–µ—Å—è—Ü–∞)")
    print("3. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ")
    print("4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("5. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")

    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()

    freqtrade_path, config_file = prepare_freqtrade_env()

    if choice == "1":
        quick_test()
    elif choice == "2":
        # –ü–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç
        timerange = "20250715-20250914"
        run_backtest(freqtrade_path, config_file, timerange=timerange)
    elif choice == "3":
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        pairs = ["BTC/USDT", "ETH/USDT", "BNB/USDT", "SOL/USDT", "DOGE/USDT"]
        download_data(freqtrade_path, pairs, "5m", 60)
    elif choice == "4":
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        print("\nüîß –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        os.chdir(freqtrade_path)
        cmd = f"""
cd {freqtrade_path}
.\\venv\\Scripts\\Activate.ps1
freqtrade hyperopt --userdir ft_userdata --strategy AdvancedCryptoStrategy --hyperopt-loss SharpeHyperOptLoss --epochs 100 --spaces buy sell
"""
        subprocess.run(["powershell", "-ExecutionPolicy", "Bypass", "-Command", cmd])
    elif choice == "5":
        # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        print("\nüåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        print("–û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8080")
        os.chdir(freqtrade_path)
        cmd = f"""
cd {freqtrade_path}
.\\venv\\Scripts\\Activate.ps1
freqtrade webserver --userdir ft_userdata
"""
        subprocess.run(["powershell", "-ExecutionPolicy", "Bypass", "-Command", cmd])
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Freqtrade –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    parser.add_argument(
        "--mode",
        choices=["quick", "interactive"],
        default="quick",
        help="–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞"
    )

    args = parser.parse_args()

    if args.mode == "quick":
        quick_test()
    else:
        interactive_mode()