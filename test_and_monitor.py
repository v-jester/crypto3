# test_and_monitor.py
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""
import asyncio
import sys
from pathlib import Path
from datetime import datetime, timezone, timedelta
from colorama import init, Fore, Style
import pandas as pd

sys.path.insert(0, str(Path(__file__).parent))

from src.bots.advanced_paper_bot import AdvancedPaperTradingBot
from src.monitoring.logger import logger
from src.data.storage.redis_client import redis_client
from src.config.settings import settings
from binance import AsyncClient

init(autoreset=True)


class BotTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞"""

    def __init__(self):
        self.bot = None
        self.monitor_task = None
        self.running = False

    async def initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        print(f"\n{Fore.CYAN}{'=' * 60}")
        print(f"{Fore.WHITE}–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
        print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")

        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ .env
        self.bot = AdvancedPaperTradingBot(
            initial_balance=settings.PAPER_STARTING_BALANCE,
            maker_fee=settings.PAPER_MAKER_FEE,
            taker_fee=settings.PAPER_TAKER_FEE,
            slippage_bps=settings.PAPER_SLIPPAGE_BPS
        )

        try:
            await self.bot.initialize()
            print(f"{Fore.GREEN}‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω{Style.RESET_ALL}")
            print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${self.bot.initial_balance:,.2f}")
            print(f"   –°–∏–º–≤–æ–ª—ã: {', '.join(settings.trading.SYMBOLS[:3])}")
            print(f"   –¢–∞–π–º—Ñ—Ä–µ–π–º: {settings.trading.PRIMARY_TIMEFRAME}\n")
            return True
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}{Style.RESET_ALL}")
            return False

    async def test_data_freshness(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\n{Fore.CYAN}–ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•:{Style.RESET_ALL}")

        for symbol in settings.trading.SYMBOLS[:3]:
            if symbol in self.bot.indicators:
                ind = self.bot.indicators[symbol]
                last_update = self.bot.last_data_update.get(symbol)

                if last_update:
                    age = (datetime.now(timezone.utc).replace(tzinfo=None) - last_update).total_seconds()
                    status = f"{Fore.GREEN}FRESH{Style.RESET_ALL}" if age < 60 else f"{Fore.YELLOW}STALE{Style.RESET_ALL}"
                else:
                    status = f"{Fore.RED}NO DATA{Style.RESET_ALL}"
                    age = 0

                print(f"\n{Fore.GREEN}{symbol}:{Style.RESET_ALL}")
                print(f"  –¶–µ–Ω–∞: ${ind.get('price', 0):,.2f}")
                print(f"  RSI: {ind.get('rsi', 0):.2f}")
                print(f"  –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö: {status} ({age:.0f}s)")

    async def monitor_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        iteration = 0
        while self.running:
            iteration += 1

            print(f"\n{Fore.YELLOW}[{datetime.now().strftime('%H:%M:%S')}] –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration}{Style.RESET_ALL}")
            print(f"{Fore.CYAN}{'-' * 50}{Style.RESET_ALL}")

            # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            total_pnl = sum(
                getattr(pos, 'unrealized_pnl', 0)
                for pos in self.bot.positions.values()
            )

            balance_color = Fore.GREEN if self.bot.current_balance >= self.bot.initial_balance else Fore.RED
            print(f"–ë–∞–ª–∞–Ω—Å: {balance_color}${self.bot.current_balance:,.2f}{Style.RESET_ALL}")
            print(f"–ü–æ–∑–∏—Ü–∏–π: {len(self.bot.positions)}")
            print(f"–°–¥–µ–ª–æ–∫: {len(self.bot.trade_history)}")

            if total_pnl != 0:
                pnl_color = Fore.GREEN if total_pnl > 0 else Fore.RED
                print(f"Unrealized P&L: {pnl_color}${total_pnl:+.2f}{Style.RESET_ALL}")

            # –ü–æ–∑–∏—Ü–∏–∏
            if self.bot.positions:
                print(f"\n{Fore.CYAN}–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:{Style.RESET_ALL}")
                for symbol, pos in self.bot.positions.items():
                    side_color = Fore.GREEN if pos.side == 'BUY' else Fore.RED
                    if hasattr(pos, 'unrealized_pnl'):
                        pnl_color = Fore.GREEN if pos.unrealized_pnl > 0 else Fore.RED
                        print(
                            f"  {symbol}: {side_color}{pos.side}{Style.RESET_ALL} @ ${pos.entry_price:.2f} | P&L: {pnl_color}${pos.unrealized_pnl:.2f}{Style.RESET_ALL}")
                    else:
                        print(f"  {symbol}: {side_color}{pos.side}{Style.RESET_ALL} @ ${pos.entry_price:.2f}")

            # RSI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            print(f"\n{Fore.CYAN}RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:{Style.RESET_ALL}")
            for symbol in settings.trading.SYMBOLS[:3]:
                if symbol in self.bot.indicators:
                    rsi = self.bot.indicators[symbol].get('rsi', 0)
                    if rsi < 30:
                        rsi_color = Fore.RED
                        status = "OVERSOLD"
                    elif rsi > 70:
                        rsi_color = Fore.GREEN
                        status = "OVERBOUGHT"
                    else:
                        rsi_color = Fore.WHITE
                        status = "NEUTRAL"
                    print(f"  {symbol}: {rsi_color}{rsi:.2f} ({status}){Style.RESET_ALL}")

            await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    async def run_test(self, duration_minutes: int = 5):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        self.running = True

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await self.initialize_bot():
            return

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot_task = asyncio.create_task(self.bot.run())

        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_task = asyncio.create_task(self.monitor_loop())

        print(f"\n{Fore.GREEN}üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {duration_minutes} –º–∏–Ω—É—Ç...{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏{Style.RESET_ALL}\n")

        try:
            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(duration_minutes * 60)

        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...{Style.RESET_ALL}")

        finally:
            self.running = False

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
            bot_task.cancel()
            monitor_task.cancel()

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                await bot_task
            except asyncio.CancelledError:
                pass

            try:
                await monitor_task
            except asyncio.CancelledError:
                pass

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            await self.bot.stop()

            # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            await self.print_final_report()

    async def print_final_report(self):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print(f"\n{Fore.CYAN}{'=' * 60}")
        print(f"{Fore.WHITE}–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")

        final_balance = self.bot.current_balance
        total_pnl = final_balance - self.bot.initial_balance
        return_pct = (total_pnl / self.bot.initial_balance) * 100

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫
        if self.bot.trade_history:
            wins = [t for t in self.bot.trade_history if t['pnl'] > 0]
            losses = [t for t in self.bot.trade_history if t['pnl'] < 0]
            win_rate = (len(wins) / len(self.bot.trade_history)) * 100

            print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.bot.initial_balance:,.2f}")
            print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${final_balance:,.2f}")

            pnl_color = Fore.GREEN if total_pnl > 0 else Fore.RED
            print(f"–û–±—â–∏–π P&L: {pnl_color}${total_pnl:+,.2f} ({return_pct:+.2f}%){Style.RESET_ALL}")

            print(f"\n–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(self.bot.trade_history)}")
            print(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {Fore.GREEN}{len(wins)}{Style.RESET_ALL}")
            print(f"–£–±—ã—Ç–æ—á–Ω—ã—Ö: {Fore.RED}{len(losses)}{Style.RESET_ALL}")
            print(f"Win Rate: {win_rate:.1f}%")

            if wins:
                avg_win = sum(t['pnl'] for t in wins) / len(wins)
                print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {Fore.GREEN}${avg_win:.2f}{Style.RESET_ALL}")

            if losses:
                avg_loss = sum(abs(t['pnl']) for t in losses) / len(losses)
                print(f"–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {Fore.RED}${avg_loss:.2f}{Style.RESET_ALL}")
        else:
            print(f"–°–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

        print(f"\n{Fore.GREEN}‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω{Style.RESET_ALL}")


async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–∞ 1 –º–∏–Ω—É—Ç—É"""
    tester = BotTester()
    await tester.run_test(duration_minutes=1)


async def full_test():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç"""
    tester = BotTester()
    await tester.run_test(duration_minutes=10)


async def check_rsi_updates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI"""
    print(f"\n{Fore.CYAN}–ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø RSI{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'=' * 50}{Style.RESET_ALL}\n")

    client = await AsyncClient.create(
        api_key=settings.api.BINANCE_API_KEY.get_secret_value(),
        api_secret=settings.api.BINANCE_API_SECRET.get_secret_value(),
        testnet=True
    )

    symbol = "BTCUSDT"

    try:
        print(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º RSI –¥–ª—è {symbol} –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç...\n")

        previous_rsi = None

        for i in range(4):  # 4 –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ 30 —Å–µ–∫—É–Ω–¥
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
            klines = await client.get_klines(
                symbol=symbol,
                interval="1m",
                limit=50
            )

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            df = pd.DataFrame(klines, columns=[
                "open_time", "open", "high", "low", "close", "volume",
                "close_time", "quote_volume", "trades", "taker_buy_base",
                "taker_buy_quote", "ignore"
            ])

            df['close'] = df['close'].astype(float)

            # –í—ã—á–∏—Å–ª—è–µ–º RSI
            import pandas_ta as ta
            rsi = ta.rsi(df['close'], length=14)
            current_rsi = rsi.iloc[-1]

            timestamp = datetime.now().strftime('%H:%M:%S')

            if previous_rsi is not None:
                change = current_rsi - previous_rsi
                if abs(change) > 0.01:
                    print(f"[{timestamp}] RSI: {current_rsi:.2f} | –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.2f} ‚úÖ")
                else:
                    print(f"[{timestamp}] RSI: {current_rsi:.2f} | –ù–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚ö†Ô∏è")
            else:
                print(f"[{timestamp}] RSI: {current_rsi:.2f} | –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

            previous_rsi = current_rsi

            if i < 3:
                await asyncio.sleep(30)

        print(f"\n{Fore.GREEN}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞{Style.RESET_ALL}")

    finally:
        await client.close_connection()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"\n{Fore.CYAN}{'=' * 60}")
    print(f"{Fore.WHITE}–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")

    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞:")
    print("1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (1 –º–∏–Ω—É—Ç–∞)")
    print("2. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (10 –º–∏–Ω—É—Ç)")
    print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç")

    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ")

    if choice == "1":
        await quick_test()
    elif choice == "2":
        await full_test()
    elif choice == "3":
        await check_rsi_updates()
    elif choice == "4":
        print(f"\n{Fore.YELLOW}–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python src/main.py{Style.RESET_ALL}")
    else:
        print(f"{Fore.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Style.RESET_ALL}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n\n{Fore.YELLOW}–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}–û—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        import traceback

        traceback.print_exc()