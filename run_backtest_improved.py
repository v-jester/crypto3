# run_backtest_improved.py
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
import os
import sys
import json
import subprocess
from pathlib import Path
from datetime import datetime

sys.path.insert(0, str(Path(__file__).parent))
from src.config.settings import settings


def run_freqtrade_backtest():
    """
    –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    freqtrade_path = Path("C:/freqtrade-nfi")

    # PowerShell –∫–æ–º–∞–Ω–¥–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    ps_script = """
$ErrorActionPreference = "Continue"
Set-Location "C:\freqtrade-nfi"
& .\venv\Scripts\Activate.ps1

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "–ó–ê–ü–£–°–ö –ë–≠–ö–¢–ï–°–¢–ê" -ForegroundColor Yellow
Write-Host "========================================`n" -ForegroundColor Cyan

# –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
freqtrade backtesting `
    --userdir ft_userdata `
    --strategy AdvancedCryptoStrategy `
    --timerange 20250907-20250914 `
    --enable-position-stacking `
    --max-open-trades 5

# –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´" -ForegroundColor Yellow
Write-Host "========================================`n" -ForegroundColor Cyan

freqtrade backtesting-show --userdir ft_userdata

# –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
$results_file = "ft_userdata\backtest_results\.last_result.json"
if (Test-Path $results_file) {
    Write-Host "`n========================================" -ForegroundColor Cyan
    Write-Host "–ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í" -ForegroundColor Yellow
    Write-Host "========================================`n" -ForegroundColor Cyan

    $json = Get-Content $results_file | ConvertFrom-Json
    $strategy_name = $json.strategy_comparison[0].key
    $results = $json.strategy.$strategy_name

    Write-Host "–°—Ç—Ä–∞—Ç–µ–≥–∏—è: $strategy_name" -ForegroundColor Green
    Write-Host "–ü–µ—Ä–∏–æ–¥: $($json.backtest_start_time) - $($json.backtest_end_time)"
    Write-Host ""
    Write-Host "–°–¢–ê–¢–ò–°–¢–ò–ö–ê:" -ForegroundColor Yellow
    Write-Host "  –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: $($results.total_trades)"
    Write-Host "  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: $($results.wins) ($($results.win_rate)%)"
    Write-Host "  –£–±—ã—Ç–æ—á–Ω—ã—Ö: $($results.losses)"
    Write-Host ""
    Write-Host "–§–ò–ù–ê–ù–°–´:" -ForegroundColor Yellow
    Write-Host "  –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: $($results.starting_balance) USDT"
    Write-Host "  –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: $($results.final_balance) USDT"
    Write-Host "  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $($results.profit_total) USDT ($($results.profit_total_pct)%)"
    Write-Host "  –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: $($results.max_drawdown_account)%"
    Write-Host ""
    Write-Host "–ú–ï–¢–†–ò–ö–ò:" -ForegroundColor Yellow
    Write-Host "  Sharpe Ratio: $($results.sharpe)"
    Write-Host "  Sortino Ratio: $($results.sortino)"
    Write-Host "  Calmar Ratio: $($results.calmar)"
    Write-Host "  Win Rate: $($results.win_rate)%"
}
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
    temp_script = freqtrade_path / "show_results.ps1"
    with open(temp_script, "w", encoding="utf-8") as f:
        f.write(ps_script)

    # –ó–∞–ø—É—Å–∫–∞–µ–º
    result = subprocess.run(
        ["powershell", "-ExecutionPolicy", "Bypass", "-File", str(temp_script)],
        encoding='utf-8',
        capture_output=False  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞–ø—Ä—è–º—É—é
    )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_script.unlink(missing_ok=True)

    # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
    results_file = freqtrade_path / "ft_userdata" / "backtest_results" / ".last_result.json"
    if results_file.exists():
        with open(results_file, "r", encoding="utf-8") as f:
            results = json.load(f)

        print("\n" + "=" * 60)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 60)

        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if "strategy" in results:
            for strategy_name, strategy_results in results["strategy"].items():
                print(f"\n–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
                print(
                    f"–ü–µ—Ä–∏–æ–¥: {results.get('backtest_start_time', 'N/A')} - {results.get('backtest_end_time', 'N/A')}")
                print(f"\nüìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
                print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {strategy_results.get('total_trades', 0)}")
                print(f"  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {strategy_results.get('wins', 0)}")
                print(f"  ‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {strategy_results.get('losses', 0)}")

                profit_total = strategy_results.get('profit_total', 0)
                profit_pct = strategy_results.get('profit_total_pct', 0)

                if profit_total > 0:
                    print(f"\nüí∞ –ü—Ä–∏–±—ã–ª—å: ${profit_total:.2f} ({profit_pct:.2f}%)")
                else:
                    print(f"\nüí∏ –£–±—ã—Ç–æ–∫: ${profit_total:.2f} ({profit_pct:.2f}%)")

                print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏:")
                print(f"  ‚Ä¢ Sharpe Ratio: {strategy_results.get('sharpe', 0):.2f}")
                print(f"  ‚Ä¢ Max Drawdown: {strategy_results.get('max_drawdown_account', 0):.2f}%")
                print(f"  ‚Ä¢ Win Rate: {strategy_results.get('win_rate', 0):.1f}%")

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        print("\n" + "=" * 60)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("=" * 60)

        if results.get("strategy"):
            strategy_results = list(results["strategy"].values())[0]
            total_trades = strategy_results.get('total_trades', 0)

            if total_trades == 0:
                print("\n‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫! –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("  1. –°–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞")
                print("  2. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                print("  3. –í—ã—Å–æ–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                print("\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
                print("  ‚Ä¢ –°–Ω–∏–∑–∏—Ç—å buy_rsi —Å 35 –¥–æ 30")
                print("  ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å sell_rsi —Å 65 –¥–æ 70")
                print("  ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å volume_ratio —Å 1.5 –¥–æ 1.2")
            elif total_trades < 10:
                print("\n‚ö†Ô∏è –ú–∞–ª–æ —Å–¥–µ–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
                print("  ‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞")
                print("  ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–∞—Ä")
                print("  ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            else:
                win_rate = strategy_results.get('win_rate', 0)
                if win_rate < 40:
                    print("\n‚ö†Ô∏è –ù–∏–∑–∫–∏–π Win Rate. –£–ª—É—á—à–∏—Ç–µ:")
                    print("  ‚Ä¢ –§–∏–ª—å—Ç—Ä—ã –≤—Ö–æ–¥–∞ (–¥–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–Ω–¥)")
                    print("  ‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å—ã (—É–º–µ–Ω—å—à–∏—Ç–µ —Å 5% –¥–æ 3%)")
                    print("  ‚Ä¢ –¢–∞–π–º–∏–Ω–≥ –≤—Ö–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ä—à–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º)")


def analyze_and_optimize():
    """
    –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    print("\n" + "=" * 60)
    print("üîß –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("=" * 60)

    freqtrade_path = Path("C:/freqtrade-nfi")

    ps_script = """
Set-Location "C:\freqtrade-nfi"
& .\venv\Scripts\Activate.ps1

Write-Host "`n–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤..." -ForegroundColor Yellow
Write-Host "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...`n" -ForegroundColor Cyan

freqtrade hyperopt `
    --userdir ft_userdata `
    --strategy AdvancedCryptoStrategy `
    --hyperopt-loss SharpeHyperOptLoss `
    --epochs 50 `
    --spaces buy sell `
    --timerange 20250801-20250914

Write-Host "`n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green
Write-Host "–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ft_userdata\hyperopt_results\" -ForegroundColor Yellow
"""

    temp_script = freqtrade_path / "optimize.ps1"
    with open(temp_script, "w", encoding="utf-8") as f:
        f.write(ps_script)

    subprocess.run(
        ["powershell", "-ExecutionPolicy", "Bypass", "-File", str(temp_script)],
        encoding='utf-8'
    )

    temp_script.unlink(missing_ok=True)


def create_report():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    """
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

    freqtrade_path = Path("C:/freqtrade-nfi")

    ps_script = """
Set-Location "C:\freqtrade-nfi"
& .\venv\Scripts\Activate.ps1

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
freqtrade plot-dataframe `
    --userdir ft_userdata `
    --strategy AdvancedCryptoStrategy `
    --pairs BTC/USDT ETH/USDT `
    --timerange 20250907-20250914

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏
freqtrade plot-profit `
    --userdir ft_userdata `
    --strategy AdvancedCryptoStrategy `
    --timerange 20250907-20250914

Write-Host "`n‚úÖ –û—Ç—á–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –≤ ft_userdata\plot\" -ForegroundColor Green
Write-Host "–û—Ç–∫—Ä–æ–π—Ç–µ HTML —Ñ–∞–π–ª—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞" -ForegroundColor Yellow
"""

    temp_script = freqtrade_path / "create_report.ps1"
    with open(temp_script, "w", encoding="utf-8") as f:
        f.write(ps_script)

    subprocess.run(
        ["powershell", "-ExecutionPolicy", "Bypass", "-File", str(temp_script)],
        encoding='utf-8'
    )

    temp_script.unlink(missing_ok=True)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å –æ—Ç—á–µ—Ç–∞–º–∏
    plot_dir = freqtrade_path / "ft_userdata" / "plot"
    if plot_dir.exists():
        os.startfile(plot_dir)


if __name__ == "__main__":
    print("\n" + "=" * 60)
    print("FREQTRADE –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç —Å –ø–æ–ª–Ω—ã–º –≤—ã–≤–æ–¥–æ–º")
    print("2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    print("3. –°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
    print("4. –í—Å–µ –≤–º–µ—Å—Ç–µ")

    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()

    if choice == "1":
        run_freqtrade_backtest()
    elif choice == "2":
        analyze_and_optimize()
    elif choice == "3":
        create_report()
    elif choice == "4":
        run_freqtrade_backtest()
        print("\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é? (y/n): ", end="")
        if input().lower() == 'y':
            analyze_and_optimize()
        create_report()
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
        run_freqtrade_backtest()