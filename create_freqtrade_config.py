# create_freqtrade_config.py
import json
import os
from pathlib import Path


def create_full_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Freqtrade"""

    # –ü—É—Ç—å –∫ Freqtrade
    freqtrade_path = Path("C:/freqtrade-nfi")
    user_data = freqtrade_path / "ft_userdata"

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    (user_data / "strategies").mkdir(parents=True, exist_ok=True)
    (user_data / "data").mkdir(parents=True, exist_ok=True)

    config = {
        "max_open_trades": 5,
        "stake_currency": "USDT",
        "stake_amount": "unlimited",
        "tradable_balance_ratio": 0.99,
        "fiat_display_currency": "USD",
        "dry_run": True,
        "dry_run_wallet": 50000,  # –í–∞—à –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
        "cancel_open_orders_on_exit": False,
        "trading_mode": "spot",
        "margin_mode": "",

        "timeframe": "5m",  # –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º

        "unfilledtimeout": {
            "entry": 10,
            "exit": 10,
            "exit_timeout_count": 0,
            "unit": "minutes"
        },

        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º entry_pricing
        "entry_pricing": {
            "price_side": "same",
            "use_order_book": False,  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ False –¥–ª—è dry-run
            "order_book_top": 1,
            "price_last_balance": 0.0,
            "check_depth_of_market": {
                "enabled": False,
                "bids_to_ask_delta": 1
            }
        },

        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º exit_pricing
        "exit_pricing": {
            "price_side": "same",
            "use_order_book": False,  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ False –¥–ª—è dry-run
            "order_book_top": 1,
            "price_last_balance": 0.0
        },

        "exchange": {
            "name": "binance",
            "key": "",  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –¥–ª—è dry-run
            "secret": "",  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –¥–ª—è dry-run
            "ccxt_config": {},
            "ccxt_async_config": {},
            "pair_whitelist": [
                "BTC/USDT",
                "ETH/USDT",
                "SOL/USDT",
                "BNB/USDT",
                "DOGE/USDT",
                "AVAX/USDT"
            ],
            "pair_blacklist": []
        },

        "pairlists": [
            {
                "method": "StaticPairList"
            }
        ],

        "dataformat_ohlcv": "json",
        "dataformat_trades": "json",

        "user_data_dir": str(user_data),
        "datadir": str(user_data / "data"),
        "strategy_path": str(user_data / "strategies"),

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API —Å–µ—Ä–≤–µ—Ä–∞
        "api_server": {
            "enabled": False,
            "listen_ip_address": "127.0.0.1",  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
            "listen_port": 8080,  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
            "username": "freqtrader",  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
            "password": "password",  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
            "verbosity": "error",
            "enable_openapi": False,
            "jwt_secret_key": "somethingrandom",
            "ws_token": "",
            "CORS_origins": []
        },

        "bot_name": "AdvancedCryptoBot",
        "initial_state": "running",
        "force_entry_enable": False
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = user_data / "config.json"
    with open(config_file, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=2)

    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config_file}")

    # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    strategy_source = Path("freqtrade_strategy.py")
    strategy_dest = user_data / "strategies" / "AdvancedCryptoStrategy.py"

    if strategy_source.exists():
        with open(strategy_source, "r", encoding="utf-8") as src:
            content = src.read()
        with open(strategy_dest, "w", encoding="utf-8") as dst:
            dst.write(content)
        print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {strategy_dest}")

    return config_file


if __name__ == "__main__":
    config_path = create_full_config()
    print("\nüìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")
    print("\n–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print("python run_freqtrade_setup.py")