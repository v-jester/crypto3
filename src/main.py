# src/main.py
"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã: monitor, paper, live
"""
import asyncio
import sys
import signal
import platform
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º uvloop —Ç–æ–ª—å–∫–æ –Ω–∞ Unix —Å–∏—Å—Ç–µ–º–∞—Ö
try:
    if platform.system() != "Windows":
        import uvloop

        USE_UVLOOP = True
    else:
        USE_UVLOOP = False
except ImportError:
    USE_UVLOOP = False

from src.config.settings import settings, BotMode
from src.monitoring.logger import logger, set_log_level
from src.data.storage.redis_client import init_redis
from src.utils.banner import print_banner

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
try:
    from src.bots.paper_trading_bot_v5 import EnhancedPaperTradingBotV5
except ImportError:
    EnhancedPaperTradingBotV5 = None

try:
    from src.bots.trading_bot import TradingBot
except ImportError:
    TradingBot = None

try:
    from src.monitoring.metrics import MetricsServer
except ImportError:
    MetricsServer = None


class Application:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""

    def __init__(self):
        self.bot = None
        self.metrics_server = None
        self.shutdown_event = asyncio.Event()

    async def check_environment(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.logger.info("Checking environment...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        try:
            redis_url = settings.database.redis_url
            await init_redis(redis_url)

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Redis
            from src.data.storage.redis_client import redis_client
            await redis_client.set("health_check", "OK", expire=10)
            result = await redis_client.get("health_check")

            if result != "OK":
                logger.logger.error("‚úó Redis health check failed")
                return False

            logger.logger.info("‚úÖ Redis connection OK")

        except Exception as e:
            logger.logger.warning(f"‚ö†Ô∏è Redis connection failed: {e}")
            logger.logger.info("Will continue without Redis caching")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ –≤ monitor —Ä–µ–∂–∏–º–µ)
        if settings.BOT_MODE != BotMode.MONITOR:
            try:
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É PostgreSQL/TimescaleDB
                logger.logger.info("‚úÖ Database connection OK (not implemented)")
            except Exception as e:
                logger.logger.warning(f"Database not configured: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        if settings.BOT_MODE in [BotMode.PAPER, BotMode.LIVE]:
            api_key = settings.api.BINANCE_API_KEY.get_secret_value() if settings.api.BINANCE_API_KEY else None
            api_secret = settings.api.BINANCE_API_SECRET.get_secret_value() if settings.api.BINANCE_API_SECRET else None

            if not api_key or not api_secret:
                logger.logger.error("‚úó Binance API credentials not configured")
                return False
            logger.logger.info("‚úÖ API credentials configured")

        return True

    async def initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        mode = settings.BOT_MODE

        logger.logger.info(f"Initializing bot in {mode.value} mode...")

        if mode == BotMode.MONITOR:
            # –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - —Ç–æ–ª—å–∫–æ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏
            logger.logger.info("Monitor mode: collecting data without trading")
            # TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MonitorBot
            logger.logger.warning("Monitor mode not implemented yet")

        elif mode == BotMode.PAPER:
            # Paper trading
            if EnhancedPaperTradingBotV5 is None:
                raise ImportError("Paper trading bot not available")

            self.bot = EnhancedPaperTradingBotV5(
                initial_balance=settings.PAPER_STARTING_BALANCE,
                maker_fee=settings.PAPER_MAKER_FEE,
                taker_fee=settings.PAPER_TAKER_FEE,
                slippage_bps=settings.PAPER_SLIPPAGE_BPS
            )

            try:
                await self.bot.initialize()
                logger.logger.info("‚úÖ Paper trading bot initialized")
            except Exception as e:
                logger.logger.error(f"Failed to initialize paper trading bot: {e}")
                raise

        elif mode == BotMode.LIVE:
            # Live trading
            if settings.ENVIRONMENT.value != "production":
                logger.logger.warning("‚ö†Ô∏è Live trading in non-production environment!")

            if TradingBot is None:
                raise ImportError("Live trading bot not available")

            self.bot = TradingBot()
            await self.bot.initialize()
            logger.logger.info("‚úÖ Live trading bot initialized")

        else:
            raise ValueError(f"Unknown bot mode: {mode}")

    async def start_metrics_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
        if settings.monitoring.ENABLE_PROMETHEUS and MetricsServer:
            try:
                self.metrics_server = MetricsServer(port=settings.monitoring.PROMETHEUS_PORT)
                await self.metrics_server.start()
                logger.logger.info(f"‚úÖ Metrics server started on port {settings.monitoring.PROMETHEUS_PORT}")
            except Exception as e:
                logger.logger.warning(f"Failed to start metrics server: {e}")
        else:
            logger.logger.info("Metrics server disabled or not available")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            # –ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞
            print_banner()

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            set_log_level(settings.monitoring.LOG_LEVEL)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger.logger.info(
                "Starting Crypto Trading Bot",
                environment=settings.ENVIRONMENT.value,
                mode=settings.BOT_MODE.value,
                trading_mode=settings.TRADING_MODE.value,
                version=settings.VERSION,
                platform=platform.system()
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not await self.check_environment():
                logger.logger.error("Environment check failed. Exiting...")
                sys.exit(1)

            # –ó–∞–ø—É—Å–∫ –º–µ—Ç—Ä–∏–∫
            await self.start_metrics_server()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            await self.initialize_bot()

            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            if self.bot:
                logger.logger.info("üöÄ Starting bot main loop...")

                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –±–æ—Ç–∞
                bot_task = asyncio.create_task(self.bot.run())

                # –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞
                done, pending = await asyncio.wait(
                    [bot_task, asyncio.create_task(self.shutdown_event.wait())],
                    return_when=asyncio.FIRST_COMPLETED
                )

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
                logger.logger.info("üõë Stopping bot...")

                if hasattr(self.bot, 'stop'):
                    await self.bot.stop()

                # –û—Ç–º–µ–Ω—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                for task in pending:
                    task.cancel()
                    try:
                        await task
                    except asyncio.CancelledError:
                        pass

            else:
                # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞
                logger.logger.info("No bot initialized, waiting for shutdown signal...")
                await self.shutdown_event.wait()

        except KeyboardInterrupt:
            logger.logger.info("Received keyboard interrupt")
        except Exception as e:
            logger.logger.error(f"Application run failed: {e}")
            logger.log_error(e, {"context": "Application run failed"})
            raise
        finally:
            await self.cleanup()

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.logger.info("üßπ Cleaning up resources...")

        if self.metrics_server:
            try:
                await self.metrics_server.stop()
            except Exception as e:
                logger.logger.warning(f"Error stopping metrics server: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        try:
            from src.data.storage.redis_client import close_redis
            await close_redis()
        except Exception as e:
            logger.logger.warning(f"Error closing Redis connection: {e}")

        logger.logger.info("‚úÖ Cleanup completed")

    def handle_signal(self, sig, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.logger.info(f"Received signal {sig}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if not self.shutdown_event.is_set():
            asyncio.create_task(self._set_shutdown_event())

    async def _set_shutdown_event(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.shutdown_event.set()


def setup_signal_handlers(app: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        # –í Windows –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ SIGINT –∏ SIGTERM
        signal.signal(signal.SIGINT, app.handle_signal)

        if platform.system() != "Windows":
            signal.signal(signal.SIGTERM, app.handle_signal)

    except Exception as e:
        logger.logger.warning(f"Failed to setup signal handlers: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º uvloop —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω (Unix —Å–∏—Å—Ç–µ–º—ã)
    if USE_UVLOOP:
        asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
        logger.logger.info("Using uvloop for better performance")
    else:
        logger.logger.info(f"Using default event loop on {platform.system()}")

    app = Application()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    setup_signal_handlers(app)

    try:
        await app.run()
    except Exception as e:
        logger.logger.error(f"Fatal error: {e}")
        return 1

    return 0


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        if exit_code == 0:
            print("\n‚úÖ Shutdown complete")
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚úÖ Shutdown complete")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Fatal error: {e}")
        sys.exit(1)